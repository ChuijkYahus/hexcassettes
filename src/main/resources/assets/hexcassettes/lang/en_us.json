{
	"advancements.hexcassettes.quinio.title": "QUINIO",
	"advancements.hexcassettes.quinio.description": "Make a Hex cast a Hex.",
	"advancements.hexcassettes.tape_worm.title": "Tape Worm?",
	"advancements.hexcassettes.tape_worm.description": "Consume a cassette tape.",
	"advancements.hexcassettes.full_arsenal.title": "Full Album",
	"advancements.hexcassettes.full_arsenal.description": "Acquire a full arsenal of cassettes.",
	"key.categories.hexcassettes": "Hexcassettes",
	"key.hexcassettes.view_cassettes": "Ponder Cassettes",
	"item.hexcassettes.cassette": "Cassette",
	"screen.hexical.cassette": "Cassettes",
	"subtitles.hexcassettes.cassette_eject": "Cassette ejects",
	"subtitles.hexcassettes.cassette_fail": "Cassette clicks",
	"subtitles.hexcassettes.cassette_insert": "Cassette inserted",
	"subtitles.hexcassettes.cassette_loop": "Cassette whirrs",

	"hexcasting.mishap.hexcassettes:too_many_cassettes": "Attempted to schedule more Hexes than owned cassettes.",

	"hexcassettes.page.async.title": "Asynchronous Hexes",
	"hexcassettes.page.async.0": "As part of their nature, _Hexes evaluate in their entirety instantly. To delay _Hexes, Nature has devised a quite the whimsical solution: a cassette tape that must be crafted and then \"consumed\". I may have up to six of these, and each holds a _Hex I request to delay until that _Hex casts. Then the cassette becomes free to hold further _Hexes.",
	"hexcassettes.page.async.craft": "After plating a $(item)Music Disc$() with a hefty amount of $(item)$(l:items/amethyst)Charged Amethyst$() to enable the $(o)abstraction$(), I can $(o)consume$() my creation using magic and a lot of chewing to add it to my mind's collection.",
    "hexcasting.action.hexcassettes:enqueue": "Enqueue",
    "hexcassettes.page.enqueue.summary": "Enqueues a _Hex to cast after that many twentieths of a second. It also takes an additional number to use as an index.",
	"hexcassettes.page.async.1": "The index number is used to distinguish cassettes and ranges from 0 to one less than the number of cassettes I have. Enqueuing two _Hexes at the same index overwrites the older one. If I attempt to enqueue more _Hexes than I have cassettes, I incur the Parallel Processing mishap which kills all my currently active cassettes.$(br2)$(o)Ibra oniki ra. QUINIO QUINIO QUINIO QUINIO alef a ra.$()",
    "hexcassettes.page.async.2": "I can ponder my cassettes by pressing $(k:hexcassettes.view_cassettes) and cycle through them with the arrow keys. Queued _Hexes are represented as inserted cassettes with their label rendered to the side, and by pressing an cassette, I can cancel the corresponding _Hex.$(br2)Dying also forcibly disqueues all of my cassettes. I can rest easy that I will not trap myself in an endless death cycle.",
	"hexcassettes.page.async.3": "If a _Hex casts a near-identical copy of itself, a phenomenon emerges that ancient _Hexcasters call a daemon, which allows for passive _Hexcasting. Study into this branch of _Hexcasting seems limited due to the great danger: cassette _Hexes exclusively use the _media from my inventory. If left unchecked, rapid automated casting can easily drain all my _media and with nothing else to consume, my life.",
    "hexcasting.action.hexcassettes:dequeue": "Dequeue",
    "hexcassettes.page.dequeue.summary": "Dequeues the cassette of the provided index if it is queued.",
	"hexcasting.action.hexcassettes:killall": "Disqueue",
	"hexcassettes.page.killall.summary": "Dequeues all queued cassettes, similar to the effects of the Parallel Processing mishap.",
	"hexcasting.action.hexcassettes:specs": "Threading Reflection",
	"hexcassettes.page.specs.summary": "Pushes the total number of cassettes that I have in my mind's collection.",
	"hexcasting.action.hexcassettes:free": "Idling Purification",
	"hexcassettes.page.free.summary": "Pushes a list of the indices of my non-busy cassettes.",
	"hexcasting.action.hexcassettes:inspect": "Program Purification",
	"hexcassettes.page.inspect.summary": "Pushes null if I do not have an active cassette at that index, or the cassette's _Hex if I do. I hear rumors of this being used for iota storage and passing information between _Hexes.",
	"hexcasting.action.hexcassettes:foretell": "Oracle Purification",
	"hexcassettes.page.foretell.summary": "Pushes null if I do not have an active cassette at that index, or how many twentieths of a second until that cassette fires if I do.",
	"hexcassettes.page.enqueue.summary.2": "A variant of $(l:async#hexcassettes:enqueue)$(action)Enqueue$() that does not require a manual index. It targets the first free cassette and pushes the index used. If there are no free cassettes, incurs the Parallel Processing mishap."
}